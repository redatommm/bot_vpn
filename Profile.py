from aiogram import types, F, Router
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import Dispatcher
import sqlite3, os, logging
from typing import Optional
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)
router = Router(name="profile_router")

class DatabaseManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.conn = self.init_db()
        
    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            cursor.execute("DROP TABLE IF EXISTS users")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                subscription_status TEXT DEFAULT '–ü—Ä–æ–±–Ω–∞—è',
                subscription_end TEXT DEFAULT NULL,
                trial_end TEXT DEFAULT NULL,
                devices_connected INTEGER DEFAULT 1
            )
            """)
            conn.commit()
            return conn
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            if os.path.exists(self.db_path):
                os.remove(self.db_path)
            return sqlite3.connect(self.db_path)
    
    def get_user(self, user_id: int) -> Optional[tuple]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT subscription_status, subscription_end, trial_end, devices_connected
            FROM users WHERE user_id = ?
        """, (user_id,))
        return cursor.fetchone()
    
    def check_trial_status(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        cursor = self.conn.cursor()
        cursor.execute("""
            SELECT trial_end FROM users WHERE user_id = ?
        """, (user_id,))
        result = cursor.fetchone()
        
        if not result or not result[0]:
            return False
            
        trial_end = datetime.strptime(result[0], '%Y-%m-%d %H:%M:%S')
        return datetime.now() < trial_end
    
    def add_user(self, user_id: int, username: str, first_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (3 –¥–Ω—è)
        trial_end = (datetime.now() + timedelta(days=3)).strftime('%Y-%m-%d %H:%M:%S')
        
        cursor = self.conn.cursor()
        cursor.execute(
            "INSERT INTO users (user_id, username, first_name, trial_end) VALUES (?, ?, ?, ?)",
            (user_id, username, first_name, trial_end)
        )
        self.conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id} —Å –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º –¥–æ {trial_end}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_PATH = os.path.join(os.path.dirname(__file__), 'vpn_users.db')
db_manager = DatabaseManager(DB_PATH)

async def ensure_user_exists(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç"""
    user_id = message.from_user.id
    if not db_manager.get_user(user_id):
        db_manager.add_user(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ—Ñ–∏–ª—å'"""
    try:
        user_id = message.from_user.id
        user_data = db_manager.get_user(user_id)

        if not user_data:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        is_trial_active = db_manager.check_trial_status(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if is_trial_active:
            subscription_status = "‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            subscription_end = user_data[2]  # trial_end
        else:
            is_active = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user_data[0].lower() == "–∞–∫—Ç–∏–≤–Ω–∞" else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            subscription_status = is_active
            subscription_end = user_data[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_message = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"‚îú –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {user_data[3]}\n"
            f"‚îî ID: <code>{user_id}</code>\n\n"
            f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n"
            f"‚îú –°—Ç–∞—Ç—É—Å: {subscription_status}\n"
            f"‚îî –û–∫–æ–Ω—á–∞–Ω–∏–µ: {subscription_end}"
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription")
        ]])

        await message.answer(profile_message, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ profile_handler: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è")

@router.callback_query(F.data == "renew_subscription")
async def renew_subscription_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_id = callback.from_user.id
        user_data = db_manager.get_user(user_id)
        
        renew_message = (
            f"üîî <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç: {user_data[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:"
        )
        
        renew_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 299‚ÇΩ", callback_data="renew_1month")],
            [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 799‚ÇΩ", callback_data="renew_3month")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ])
        
        await callback.message.edit_text(renew_message, reply_markup=renew_keyboard, parse_mode="HTML")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ renew_subscription_handler: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏", show_alert=True)

@router.callback_query(F.data == "back_to_profile")
async def back_to_profile_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å"""
    try:
        user_id = callback.from_user.id
        user_data = db_manager.get_user(user_id)

        if not user_data:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        is_trial_active = db_manager.check_trial_status(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        if is_trial_active:
            subscription_status = "‚úÖ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
            subscription_end = user_data[2]  # trial_end
        else:
            is_active = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if user_data[0].lower() == "–∞–∫—Ç–∏–≤–Ω–∞" else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            subscription_status = is_active
            subscription_end = user_data[1] or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        profile_message = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"‚îú –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {user_data[3]}\n"
            f"‚îî ID: <code>{user_id}</code>\n\n"
            f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n"
            f"‚îú –°—Ç–∞—Ç—É—Å: {subscription_status}\n"
            f"‚îî –û–∫–æ–Ω—á–∞–Ω–∏–µ: {subscription_end}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_subscription")
        ]])

        await callback.message.edit_text(
            text=profile_message,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_profile_handler: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ", show_alert=True)

def register_profile_module(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    dp.include_router(router)

def register_profile_module(dp):
    dp.include_router(router)
