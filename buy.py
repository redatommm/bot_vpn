from aiogram import F, types, Router, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import random
import logging
from typing import Optional
from google_logger import GoogleLogger

logger = logging.getLogger(__name__)
router = Router(name="purchase_router")

class PurchaseStates(StatesGroup):
    SELECT_PRODUCT = State()
    CONFIRMATION = State()
    PAYMENT = State()

prices = {1: 100, 3: 250, 12: 800}

@router.message(F.text == "üõí –ö—É–ø–∏—Ç—å VPN")
async def start_vpn_purchase(message: types.Message, state: FSMContext, google_logger: Optional[GoogleLogger] = None):
    if google_logger:
        google_logger.log_user_action(
            user_id=message.from_user.id,
            username=message.from_user.username,
            action="–ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏",
            additional_info="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ VPN"
        )
    await show_tariffs(message)
    await state.set_state(PurchaseStates.SELECT_PRODUCT)

async def show_tariffs(target: types.Message | types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="1 –º–µ—Å—è—Ü - 100‚ÇΩ", callback_data="vpn_1")],
            [InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞ - 250‚ÇΩ", callback_data="vpn_3")],
            [InlineKeyboardButton(text="1 –≥–æ–¥ - 800‚ÇΩ", callback_data="vpn_12")],
        ]
    )
    text = "üîê <b>GhostLink VPN - –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>"

    if isinstance(target, types.Message):
        await target.answer(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await target.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data.startswith("vpn_"))
@router.callback_query(F.data == "vpn_back")
@router.callback_query(F.data == "confirm_purchase")
@router.callback_query(F.data == "purchase_yes")
async def process_callback(callback: types.CallbackQuery, state: FSMContext, google_logger: Optional[GoogleLogger] = None):
    try:
        action = callback.data
        if action == "vpn_back":
            await show_tariffs(callback)
            await state.set_state(PurchaseStates.SELECT_PRODUCT)
        elif action.startswith("vpn_"):
            await handle_tariff_selection(callback, state, google_logger)
        elif action == "confirm_purchase":
            await handle_confirmation(callback, state)
        elif action == "purchase_yes":
            await handle_payment(callback, state, google_logger)

        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        if google_logger:
            google_logger.log_user_action(
                user_id=callback.from_user.id,
                username=callback.from_user.username,
                action="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ",
                additional_info=str(e)
            )
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

async def handle_tariff_selection(callback: types.CallbackQuery, state: FSMContext, google_logger: Optional[GoogleLogger] = None):
    period = int(callback.data.split("_")[1])
    await state.update_data(
        product_name=f"GhostLink VPN –Ω–∞ {period} –º–µ—Å.",
        price=prices[period],
        period=period
    )
    
    if google_logger:
        google_logger.log_user_action(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            action="–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞",
            additional_info=f"–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ –Ω–∞ {period} –º–µ—Å—è—Ü–µ–≤ –∑–∞ {prices[period]}‚ÇΩ"
        )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data="confirm_purchase")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="vpn_back")]
        ]
    )
    await callback.message.edit_text(
        f"<b>üîí GhostLink VPN –Ω–∞ {period} –º–µ—Å.</b>\n\n"
        f"<i>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</i>\n"
        f"‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫\n"
        f"‚úÖ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
        f"‚úÖ –ù—É–ª–µ–≤–æ–π –ø–∏–Ω–≥\n"
        f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤\n\n"
        f"<b>–¶–µ–Ω–∞: {prices[period]}‚ÇΩ</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PurchaseStates.SELECT_PRODUCT)

async def handle_confirmation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="purchase_yes")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="vpn_back")]
        ]
    )
    await callback.message.edit_text(
        f"<b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
        f"–¢–æ–≤–∞—Ä: <b>{data['product_name']}</b>\n"
        f"–¶–µ–Ω–∞: <b>{data['price']}‚ÇΩ</b>\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PurchaseStates.CONFIRMATION)

async def handle_payment(callback: types.CallbackQuery, state: FSMContext, google_logger: Optional[GoogleLogger] = None):
    data = await state.get_data()
    payment_id = random.randint(10000, 99999)
    
    if google_logger:
        google_logger.log_user_action(
            user_id=callback.from_user.id,
            username=callback.from_user.username,
            action="–û–ø–ª–∞—Ç–∞",
            additional_info=f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ #{payment_id} –Ω–∞ —Å—É–º–º—É {data['price']}‚ÇΩ"
        )
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=f"https://example.com/pay/{payment_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="confirm_purchase")]
        ]
    )
    await callback.message.edit_text(
        f"<b>–û–ø–ª–∞—Ç–∞ #{payment_id}</b>\n"
        f"–°—É–º–º–∞: <b>{data['price']}‚ÇΩ</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(PurchaseStates.PAYMENT)

def register_purchase_module(dp: Dispatcher, google_logger: Optional[GoogleLogger] = None):
    dp.include_router(router)
