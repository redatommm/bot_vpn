from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import asyncio
import logging
from typing import Optional
from google_logger import GoogleLogger

class SupportStates(StatesGroup):
    WAITING_FOR_QUESTION = State()
    ANSWERING_QUESTION = State()

class SupportModule:
    def __init__(self, dp: Dispatcher, admin_chat_id: int = None, google_logger: Optional[GoogleLogger] = None):
        self.dp = dp
        self.admin_chat_id = admin_chat_id
        self.google_logger = google_logger
        self.active_requests = {}
        self.register_handlers()

    def register_handlers(self):
        self.dp.message.register(self.handle_support_request, F.text == "üÜò –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞")
        self.dp.callback_query.register(self.handle_support_callback, F.data.startswith("support_"))
        self.dp.message.register(self.handle_user_question, SupportStates.WAITING_FOR_QUESTION)

    async def handle_support_request(self, message: types.Message, state: FSMContext):
        if self.google_logger:
            self.google_logger.log_user_action(
                user_id=message.from_user.id,
                username=message.from_user.username,
                action="–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                additional_info="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
            )
        
        await state.set_state(SupportStates.WAITING_FOR_QUESTION)
        await message.answer(
            "<b>üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
            "–ù–∞—à –Ω–µ–π—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ.\n\n"
            "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel</i>",
            parse_mode="HTML"
        )

    async def handle_user_question(self, message: types.Message, state: FSMContext):
        question = message.text
        user_id = message.from_user.id
        
        if self.google_logger:
            self.google_logger.log_user_action(
                user_id=message.from_user.id,
                username=message.from_user.username,
                action="–í–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                additional_info=f"–í–æ–ø—Ä–æ—Å: {question}"
            )
        
        self.active_requests[user_id] = (message.message_id, question)
        await message.answer("üîÑ –í–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        await asyncio.sleep(2)
        ai_response = (
            f"ü§ñ <b>–ù–µ–π—Ä–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç:</b>\n\n"
            f"–í–∞—à –≤–æ–ø—Ä–æ—Å: <i>{question}</i>\n\n"
            f"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
            f"2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è\n"
            f"3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"
        )
        reply_markup = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="support_close")
        ]])
        await message.answer(ai_response, reply_markup=reply_markup, parse_mode="HTML")
        await state.clear()
        if self.admin_chat_id:
            await message.bot.send_message(
                self.admin_chat_id,
                f"üì® –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç @{message.from_user.username}:\n\n{question}"
            )

    async def handle_support_callback(self, callback: types.CallbackQuery, state: FSMContext):
        action = callback.data.split("_")[1]
        if action == "close":
            if self.google_logger:
                self.google_logger.log_user_action(
                    user_id=callback.from_user.id,
                    username=callback.from_user.username,
                    action="–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è",
                    additional_info="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                )
            await callback.message.delete()
            await callback.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        elif action == "start":
            await state.set_state(SupportStates.WAITING_FOR_QUESTION)
            await callback.message.edit_text(
                "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:",
                reply_markup=None
            )
            await callback.answer()

def register_support_module(dp: Dispatcher, admin_chat_id=None, google_logger: Optional[GoogleLogger] = None):
    support = SupportModule(dp, admin_chat_id, google_logger)
    return support
