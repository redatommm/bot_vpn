from aiogram import F, types, Router
from aiogram.filters import Command
import logging
from Profile import db_manager
import os
import random
import string
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)
router = Router(name="connect_router")

def generate_client_config(username: str, trial_end: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ OpenVPN –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenVPN
    config = f"""client
dev tun
proto udp
remote your-vpn-server.com 1194
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
verb 3
auth-user-pass
<ca>
-----BEGIN CERTIFICATE-----
YOUR_CA_CERTIFICATE_HERE
-----END CERTIFICATE-----
</ca>
<cert>
-----BEGIN CERTIFICATE-----
YOUR_CLIENT_CERTIFICATE_HERE
-----END CERTIFICATE-----
</cert>
<key>
-----BEGIN PRIVATE KEY-----
YOUR_CLIENT_KEY_HERE
-----END PRIVATE KEY-----
</key>
"""
    return config

@router.message(F.text == "üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN")
async def connect_vpn(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN"""
    try:
        user_id = message.from_user.id
        user_data = db_manager.get_user(user_id)

        if not user_data:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        is_trial_active = db_manager.check_trial_status(user_id)
        
        if not is_trial_active and user_data[0].lower() != "–∞–∫—Ç–∏–≤–Ω–∞":
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN."
            )
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        username = f"user_{user_id}"
        config = generate_client_config(username, user_data[2])  # trial_end

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_filename = f"vpn_config_{user_id}.ovpn"
        with open(config_filename, "w") as f:
            f.write(config)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(config_filename, "rb") as f:
            await message.answer_document(
                document=types.FSInputFile(config_filename),
                caption="üìé –í–∞—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª OpenVPN\n\n"
                        "1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª\n"
                        "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenVPN –Ω–∞ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
                        "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ OpenVPN\n"
                        "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN"
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(config_filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ VPN: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

def register_connect_module(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN"""
    dp.include_router(router) 