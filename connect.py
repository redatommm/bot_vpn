from aiogram import F, types, Router
from aiogram.filters import Command
import logging
from Profile import db_manager
import os
import random
import string
from datetime import datetime, timedelta
from vpn_config_generator import vpn_generator

logger = logging.getLogger(__name__)
router = Router(name="connect_router")

def generate_client_config(username: str, trial_end: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ OpenVPN –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ SSH
    user_id = int(username.replace("user_", ""))
    config = vpn_generator.generate_openvpn_config(user_id)
    if config:
        return config
    else:
        # Fallback –Ω–∞ –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ SSH –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        return f"""client
dev tun
proto udp
remote 31.58.171.77 1194
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
verb 3
auth-user-pass
<ca>
-----BEGIN CERTIFICATE-----
YOUR_CA_CERTIFICATE_HERE
-----END CERTIFICATE-----
</ca>
<cert>
-----BEGIN CERTIFICATE-----
YOUR_CLIENT_CERTIFICATE_HERE
-----END CERTIFICATE-----
</cert>
<key>
-----BEGIN PRIVATE KEY-----
YOUR_CLIENT_KEY_HERE
-----END PRIVATE KEY-----
</key>
"""

@router.message(F.text == "üîå –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN")
async def connect_vpn(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN"""
    try:
        user_id = message.from_user.id
        user_data = db_manager.get_user(user_id)

        if not user_data:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        is_trial_active = db_manager.check_trial_status(user_id)
        
        if not is_trial_active and user_data[0].lower() != "–∞–∫—Ç–∏–≤–Ω–∞":
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN."
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ VPN
        from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîê OpenVPN", callback_data="get_openvpn")],
            [InlineKeyboardButton(text="üöÄ VLESS (Xray)", callback_data="get_vless")]
        ])
        
        await message.answer(
            "üîå <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
            "üîê <b>OpenVPN</b> - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ\n"
            "üöÄ <b>VLESS</b> - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª, –±—ã—Å—Ç—Ä–µ–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ VPN: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

@router.callback_query(F.data == "get_openvpn")
async def get_openvpn_config(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è OpenVPN –∫–æ–Ω—Ñ–∏–≥–∞"""
    try:
        user_id = callback.from_user.id
        user_data = db_manager.get_user(user_id)

        if not user_data:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        is_trial_active = db_manager.check_trial_status(user_id)
        
        if not is_trial_active and user_data[0].lower() != "–∞–∫—Ç–∏–≤–Ω–∞":
            await callback.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!",
                show_alert=True
            )
            return

        await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é OpenVPN –∫–æ–Ω—Ñ–∏–≥...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
        if db_manager.check_config_expired(user_id, 'openvpn'):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            username = f"user_{user_id}"
            config = generate_client_config(username, user_data[2])  # trial_end

            if not config:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (3 –¥–Ω—è)
            db_manager.set_config_expires(user_id, 'openvpn', 3)

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_filename = f"openvpn_config_{user_id}.ovpn"
            with open(config_filename, "w") as f:
                f.write(config)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(config_filename, "rb") as f:
                await callback.message.answer_document(
                    document=types.FSInputFile(config_filename),
                    caption="üîê <b>–í–∞—à OpenVPN –∫–æ–Ω—Ñ–∏–≥</b>\n\n"
                            "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                            "1. –°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª\n"
                            "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenVPN –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n"
                            "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª\n"
                            "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN\n\n"
                            "üåê <b>–°–µ—Ä–≤–µ—Ä:</b> 31.58.171.77:1194\n"
                            "‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 3 –¥–Ω—è",
                    parse_mode="HTML"
                )

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(config_filename)
            await callback.message.delete()
        else:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π OpenVPN –∫–æ–Ω—Ñ–∏–≥. –î–æ–∂–¥–∏—Ç–µ—Å—å –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OpenVPN: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞", show_alert=True)

@router.callback_query(F.data == "get_vless")
async def get_vless_config(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è VLESS –∫–æ–Ω—Ñ–∏–≥–∞"""
    try:
        user_id = callback.from_user.id
        user_data = db_manager.get_user(user_id)

        if not user_data:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        is_trial_active = db_manager.check_trial_status(user_id)
        
        if not is_trial_active and user_data[0].lower() != "–∞–∫—Ç–∏–≤–Ω–∞":
            await callback.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!",
                show_alert=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫ –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
        if db_manager.check_config_expired(user_id, 'vless'):
            await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é VLESS –∫–æ–Ω—Ñ–∏–≥...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            try:
                vless_link = vpn_generator.generate_vless_config(user_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS: {e}")
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            if not vless_link:
                await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (3 –¥–Ω—è)
            db_manager.set_config_expires(user_id, 'vless', 3)

            await callback.message.edit_text(
                f"üöÄ <b>–í–∞—à VLESS –∫–æ–Ω—Ñ–∏–≥</b>\n\n"
                f"üìã <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
                f"<code>{vless_link}</code>\n\n"
                f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
                f"1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ\n"
                f"2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ V2rayNG –∏–ª–∏ V2rayN\n"
                f"3. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥ —á–µ—Ä–µ–∑ QR-–∫–æ–¥ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é\n"
                f"4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ VPN\n\n"
                f"üåê <b>–°–µ—Ä–≤–µ—Ä:</b> 31.58.171.77:443\n"
                f"‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 3 –¥–Ω—è",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VLESS –∫–æ–Ω—Ñ–∏–≥. –î–æ–∂–¥–∏—Ç–µ—Å—å –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞", show_alert=True)

def register_connect_module(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN"""
    dp.include_router(router) 